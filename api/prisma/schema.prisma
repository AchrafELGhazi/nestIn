// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

model User {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  email     String      @unique
  username  String      @unique
  password  String
  avatar    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime?
  Post      Post[]      @relation("author")
  SavedPost SavedPost[] @relation("saved-post")
}

model DeletedUser {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  originalId     String    @unique
  email          String
  username       String
  password       String
  avatar         String?
  createdAt      DateTime
  updatedAt      DateTime?
  deletedAt      DateTime  @default(now())
  deletedBy      String?
  deletionReason String?
}

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Float
  images     String[]
  address    String
  city       String
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  type       Type
  property   Property
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?
  user       User        @relation("author", fields: [userId], references: [id])
  userId     String      @db.ObjectId
  PostDetail PostDetail?
  SavedPost  SavedPost[] @relation("saved")
}

model PostDetail {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  description String
  utilities   String?
  pet         String?
  income      String?
  size        Int?
  school      Int?
  bus         Int?
  restaurant  Int?
  post        Post    @relation(fields: [postId], references: [id])
  postId      String  @unique @db.ObjectId
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation("saved-post", fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation("saved", fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}
